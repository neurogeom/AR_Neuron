//// Each #kernel tells which function to compile; you can have many kernels
//#pragma kernel Iteration1
//#pragma kernel Iteration2
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
//RWTexture2D<float4> Result;
//RWStructuredBuffer<int> output;
//StructuredBuffer<int> input;
int2 size;
RWStructuredBuffer<int> img;
groupshared int count1 = 1;
groupshared int count2 = 0;

[numthreads(32, 32, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	int index = id.x + id.y * size.x;
	while (count1 + count2 > 0) {
		
		count1 = 0;
		count2 = 0;
		AllMemoryBarrierWithGroupSync();
		//int offset[9][2] = { {0,0} ,{0,-1},{1,-1},{1,0} ,{1,1} ,{0,1} ,{-1,1} ,{-1,0} ,{-1,-1} };
		int offset[9][2] = { { 0, 0 }, { 1, 0 }, { 1, 1 }, { 0, 1 }, { -1, 1 }, { -1,0 }, { -1, -1 }, { 0, -1 }, { 1, -1 } };
		int p[9] = { 0,0,0,0,0,0,0,0,0 };
		for (int t = 0; t < 9; t++) {
			int i = id.x + offset[t][0];
			int j = id.y + offset[t][1];
			if (i < 0 || i >= size.x || j < 0 || j >= size.y)
				p[t] = 0;
			else
			{
				int index2 = i + j * size.x;
				p[t] = img[index2] > 0 ? 1 : 0;
			}
		}
		int C1 = (p[1] == 0 && (p[2] != 0 || p[3] != 0)) ? 1 : 0;
		int C2 = (p[3] == 0 && (p[4] != 0 || p[5] != 0)) ? 1 : 0;
		int C3 = (p[5] == 0 && (p[6] != 0 || p[7] != 0)) ? 1 : 0;
		int C4 = (p[7] == 0 && (p[8] != 0 || p[1] != 0)) ? 1 : 0;
		int C = C1 + C2 + C3 + C4;
		int B = p[1] + p[2] + p[3] + p[4] + p[5] + p[6] + p[7] + p[8];

		AllMemoryBarrierWithGroupSync();
		if (img[index] == 0) {
			img[index] = 0;
		}
		else if ((id.x + id.y) % 2 == 0 && C == 1 && B >= 2 && B <= 7 && p[1] * p[3] * p[5] == 0 && p[3] * p[5] * p[7] == 0) {
			img[index] = 0;
			InterlockedAdd(count1, 1);
		}
		else img[index] = 255;
		AllMemoryBarrierWithGroupSync();

		for (int t = 0; t < 9; t++) {
			int i = id.x + offset[t][0];
			int j = id.y + offset[t][1];
			if (i < 0 || i >= size.x || j < 0 || j >= size.y)
				p[t] = 0;
			else
			{
				int index2 = i + j * size.x;
				p[t] = img[index2] > 0 ? 1 : 0;
			}
		}
		C1 = (p[1] == 0 && (p[2] != 0 || p[3] != 0)) ? 1 : 0;
		C2 = (p[3] == 0 && (p[4] != 0 || p[5] != 0)) ? 1 : 0;
		C3 = (p[5] == 0 && (p[6] != 0 || p[7] != 0)) ? 1 : 0;
		C4 = (p[7] == 0 && (p[8] != 0 || p[1] != 0)) ? 1 : 0;
		C = C1 + C2 + C3 + C4;
		//int C = !p[1] && (p[2] || p[3]) + !p[3] && (p[4] || p[5]) + !p[5] && (p[6] || p[7]) + !p[7] && (p[8] || p[1]);
		B = p[1] + p[2] + p[3] + p[4] + p[5] + p[6] + p[7] + p[8];
		AllMemoryBarrierWithGroupSync();
		if (img[index] == 0) {
			img[index] = 0;
		}
		else if ((id.x + id.y) % 2 != 0 && C == 1 && B >= 1 && B <= 7 && p[1] * p[3] * p[7] == 0 && p[1] * p[5] * p[7] == 0)
		{
			img[index] = 0;
			InterlockedAdd(count2, 1);
		}
		else img[index] = 255;
		AllMemoryBarrierWithGroupSync();
	}
}

//[numthreads(8, 8, 1)]
//void Iteration1(uint3 id : SV_DispatchThreadID)
//{
//	int index = id.x + id.y * size.x;
//	if (input[index] == 0) output[index] = 0;
//	else {
//		int offset[9][2] = { {0,0} ,{0,-1},{1,-1},{1,0} ,{1,1} ,{0,1} ,{-1,1} ,{-1,0} ,{-1,-1} };
//		bool p[9] = { false,false,false,false,false,false,false,false,false };
//		for (int t = 0; t < 9; t++) {
//			int i = id.x + offset[t][0];
//			int j = id.y + offset[t][1];
//			if (i < 0 || i >= size.x || j < 0 || j >= size.y)
//				p[t] = false;
//			else
//			{
//				int index2 = i + j * size.x;
//				p[t] = input[index2] > 0;
//			}
//		}
//		int C = !p[1] && (p[2] || p[3]) + !p[3] && (p[4] || p[5]) + !p[5] && (p[6] || p[7]) + !p[7] && (p[8] || p[1]);
//		int B = p[0] + p[1] + p[2] + p[3] + p[4] + p[5] + p[6] + p[7] + p[8];
//
//		if ((id.x + id.y) % 2 == 0 && C == 1 && B >= 2 && B <= 7 && p[1] * p[3] * p[5] == 0 & p[3] * p[5] * p[7] == 0) {
//			output[index] = 0;
//		}
//		else output[index] = 255;
//	}
//}
//
//[numthreads(8, 8, 1)]
//void Iteration2(uint3 id : SV_DispatchThreadID)
//{
//	int index = id.x + id.y * size.x;
//	if (input[index] == 0) output[index] = 0;
//	else {
//		int offset[9][2] = { {0,0} ,{0,-1},{1,-1},{1,0} ,{1,1} ,{0,1} ,{-1,1} ,{-1,0} ,{-1,-1} };
//		bool p[9] = { 0,0,0,0,0,0,0,0,0 };
//		for (int t = 0; t < 9; t++) {
//			int i = id.x + offset[t][0];
//			int j = id.y + offset[t][1];
//			if (i < 0 || i >= size.x || j < 0 || j >= size.y)
//				p[t] = 0;
//			else
//			{
//				int index2 = i + j * size.x;
//				p[t] = input[index2] > 0;
//			}
//		}
//		int C = !p[1] && (p[2] || p[3]) + !p[3] && (p[4] || p[5]) + !p[5] && (p[6] || p[7]) + !p[7] && (p[8] || p[1]);
//		int B = p[0] + p[1] + p[2] + p[3] + p[4] + p[5] + p[6] + p[7] + p[8];
//
//		if ((id.x + id.y) % 2 != 0 && C == 1 && B >= 1 && B <= 7 && p[1] * p[3] * p[7] == 0 & p[1] * p[5] * p[7] == 0)
//			output[index] = 0;
//		else output[index] = 255;
//	}
//}
